{"ast":null,"code":"var _jsxFileName = \"/Users/hansenngai/GitHub/project_4ww3/my-app/src/components/pages/Submission.js\";\nimport React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport PropTypes from 'prop-types';\nexport default class Submission extends React.Component {\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"exampleName\",\n      placeholder: \"Name of establishment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Text Area\"), React.createElement(Input, {\n      type: \"textarea\",\n      name: \"text\",\n      id: \"exampleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleFile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"File\"), React.createElement(Input, {\n      type: \"file\",\n      name: \"file\",\n      id: \"exampleFile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }), React.createElement(FormText, {\n      color: \"muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"This is some placeholder block-level help text for the above input. It's a bit lighter and easily wraps to a new line.\")), React.createElement(FormGroup, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Label, {\n      check: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), ' ', \"Check me out\")), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n/* Input.propTypes = {\n    children: PropTypes.node,\n    // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n    type: PropTypes.string,\n    size: PropTypes.string,\n    bsSize: PropTypes.string,\n    state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\n    plaintext: PropTypes.bool,\n    addon: PropTypes.bool,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  CustomInput.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string.isRequired, // radio, checkbox, select, range, switch, file.\n    label: PropTypes.string, // used for checkbox and radios\n    inline: PropTypes.bool,\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    bsSize: PropTypes.string,\n    cssModule: PropTypes.object,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n    // innerRef would be referenced to select node or input DOM node, depends on type property\n    innerRef: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.func,\n    ])\n  };\n  \n  Form.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormFeedback.propTypes = {\n    children: PropTypes.node,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    valid: PropTypes.bool, // default: undefined\n    tooltip: PropTypes.bool\n  };\n  \n  FormGroup.propTypes = {\n    children: PropTypes.node,\n    // Applied the row class when true, does nothing when false\n    row: PropTypes.bool,\n    // Applied the form-check class when true, form-group when false\n    check: PropTypes.bool,\n    inline: PropTypes.bool,\n    // Applied the disabled class when the check and disabled props are true, does nothing when false\n    disabled: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormText.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n    color: PropTypes.string, // default: 'muted'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  }; */","map":{"version":3,"sources":["/Users/hansenngai/GitHub/project_4ww3/my-app/src/components/pages/Submission.js"],"names":["React","Button","Form","FormGroup","Label","Input","FormText","PropTypes","Submission","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,YAAhE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,MAAMC,UAAN,SAAyBR,KAAK,CAACS,SAA/B,CAAyC;AACtDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,aAAlC;AAAgD,MAAA,WAAW,EAAC,uBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAME,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CANF,EAUE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gIAHF,CAVF,EAmBE,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAC4B,GAD5B,iBADF,CAnBF,EAyBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzBF,CADF;AA6BD;;AA/BqD;AAkCxD","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default class Submission extends React.Component {\n  render() {\n    return (\n      <Form>\n        <FormGroup>\n          <Label for=\"exampleName\">Name</Label> \n          <Input type=\"text\" name=\"name\" id=\"exampleName\" placeholder=\"Name of establishment\" />\n        </FormGroup>\n        \n        <FormGroup>\n          <Label for=\"exampleText\">Text Area</Label>\n          <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleFile\">File</Label>\n          <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n          <FormText color=\"muted\">\n            This is some placeholder block-level help text for the above input.\n            It's a bit lighter and easily wraps to a new line.\n          </FormText>\n        </FormGroup>\n        \n        <FormGroup check>\n          <Label check>\n            <Input type=\"checkbox\" />{' '}\n            Check me out\n          </Label>\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\n/* Input.propTypes = {\n    children: PropTypes.node,\n    // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n    type: PropTypes.string,\n    size: PropTypes.string,\n    bsSize: PropTypes.string,\n    state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\n    plaintext: PropTypes.bool,\n    addon: PropTypes.bool,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  CustomInput.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string.isRequired, // radio, checkbox, select, range, switch, file.\n    label: PropTypes.string, // used for checkbox and radios\n    inline: PropTypes.bool,\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    bsSize: PropTypes.string,\n    cssModule: PropTypes.object,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n    // innerRef would be referenced to select node or input DOM node, depends on type property\n    innerRef: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.func,\n    ])\n  };\n  \n  Form.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormFeedback.propTypes = {\n    children: PropTypes.node,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    valid: PropTypes.bool, // default: undefined\n    tooltip: PropTypes.bool\n  };\n  \n  FormGroup.propTypes = {\n    children: PropTypes.node,\n    // Applied the row class when true, does nothing when false\n    row: PropTypes.bool,\n    // Applied the form-check class when true, form-group when false\n    check: PropTypes.bool,\n    inline: PropTypes.bool,\n    // Applied the disabled class when the check and disabled props are true, does nothing when false\n    disabled: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormText.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n    color: PropTypes.string, // default: 'muted'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  }; */"]},"metadata":{},"sourceType":"module"}