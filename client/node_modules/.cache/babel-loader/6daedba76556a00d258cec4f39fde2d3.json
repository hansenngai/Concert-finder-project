{"ast":null,"code":"import _classCallCheck from\"/Users/hansenngai/GitHub/project_4ww3/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hansenngai/GitHub/project_4ww3/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/hansenngai/GitHub/project_4ww3/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/hansenngai/GitHub/project_4ww3/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/hansenngai/GitHub/project_4ww3/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Button,Form,FormGroup,Label,Input,FormText}from'reactstrap';var Submission=/*#__PURE__*/function(_React$Component){_inherits(Submission,_React$Component);function Submission(){_classCallCheck(this,Submission);return _possibleConstructorReturn(this,_getPrototypeOf(Submission).apply(this,arguments));}_createClass(Submission,[{key:\"render\",value:function render(){return React.createElement(Form,null,React.createElement(FormGroup,null,React.createElement(Label,{for:\"exampleName\"},\"Name\"),React.createElement(Input,{type:\"text\",name:\"name\",id:\"exampleName\",placeholder:\"Name of establishment\"})),React.createElement(FormGroup,null,React.createElement(Label,{for:\"exampleDescription\"},\"Description\"),React.createElement(Input,{type:\"textarea\",name:\"description\",id:\"exampleDescription\",placeholder:\"Enter a brief description\"})),React.createElement(FormGroup,null,React.createElement(Label,{for:\"exampleText\"},\"Longitude and Latitude\"),React.createElement(Input,{type:\"textarea\",name:\"text\",id:\"exampleText\"})),React.createElement(FormGroup,null,React.createElement(Label,{for:\"exampleFile\"},\"File\"),React.createElement(Input,{type:\"file\",name:\"file\",id:\"exampleFile\"}),React.createElement(FormText,{color:\"muted\"},\"Upload an image\")),React.createElement(Button,null,\"Submit\"));}}]);return Submission;}(React.Component);/* Input.propTypes = {\n    children: PropTypes.node,\n    // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n    type: PropTypes.string,\n    size: PropTypes.string,\n    bsSize: PropTypes.string,\n    state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\n    plaintext: PropTypes.bool,\n    addon: PropTypes.bool,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  CustomInput.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string.isRequired, // radio, checkbox, select, range, switch, file.\n    label: PropTypes.string, // used for checkbox and radios\n    inline: PropTypes.bool,\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    bsSize: PropTypes.string,\n    cssModule: PropTypes.object,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n    // innerRef would be referenced to select node or input DOM node, depends on type property\n    innerRef: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.func,\n    ])\n  };\n  \n  Form.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormFeedback.propTypes = {\n    children: PropTypes.node,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    valid: PropTypes.bool, // default: undefined\n    tooltip: PropTypes.bool\n  };\n  \n  FormGroup.propTypes = {\n    children: PropTypes.node,\n    // Applied the row class when true, does nothing when false\n    row: PropTypes.bool,\n    // Applied the form-check class when true, form-group when false\n    check: PropTypes.bool,\n    inline: PropTypes.bool,\n    // Applied the disabled class when the check and disabled props are true, does nothing when false\n    disabled: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormText.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n    color: PropTypes.string, // default: 'muted'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  }; */export{Submission as default};","map":{"version":3,"sources":["/Users/hansenngai/GitHub/project_4ww3/my-app/src/components/pages/Submission.js"],"names":["React","Button","Form","FormGroup","Label","Input","FormText","Submission","Component"],"mappings":"yoBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,SAAvB,CAAkCC,KAAlC,CAAyCC,KAAzC,CAAgDC,QAAhD,KAAgE,YAAhE,C,GAGqBC,CAAAA,U,gSACV,CACP,MACE,qBAAC,IAAD,MACE,oBAAC,SAAD,MACE,oBAAC,KAAD,EAAO,GAAG,CAAC,aAAX,SADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,EAAE,CAAC,aAAlC,CAAgD,WAAW,CAAC,uBAA5D,EAFF,CADF,CAKE,oBAAC,SAAD,MACE,oBAAC,KAAD,EAAO,GAAG,CAAC,oBAAX,gBADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,IAAI,CAAC,aAA5B,CAA0C,EAAE,CAAC,oBAA7C,CAAkE,WAAW,CAAC,2BAA9E,EAFF,CALF,CASE,oBAAC,SAAD,MACE,oBAAC,KAAD,EAAO,GAAG,CAAC,aAAX,2BADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,IAAI,CAAC,MAA5B,CAAmC,EAAE,CAAC,aAAtC,EAFF,CATF,CAaE,oBAAC,SAAD,MACE,oBAAC,KAAD,EAAO,GAAG,CAAC,aAAX,SADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,EAAE,CAAC,aAAlC,EAFF,CAGE,oBAAC,QAAD,EAAU,KAAK,CAAC,OAAhB,oBAHF,CAbF,CAqBE,oBAAC,MAAD,eArBF,CADF,CAyBD,C,wBA3BqCP,KAAK,CAACQ,S,EA8B9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA9BqBD,U","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nexport default class Submission extends React.Component {\n  render() {\n    return (\n      <Form>\n        <FormGroup>\n          <Label for=\"exampleName\">Name</Label> \n          <Input type=\"text\" name=\"name\" id=\"exampleName\" placeholder=\"Name of establishment\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleDescription\">Description</Label>\n          <Input type=\"textarea\" name=\"description\" id=\"exampleDescription\" placeholder=\"Enter a brief description\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleText\">Longitude and Latitude</Label>\n          <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleFile\">File</Label>\n          <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n          <FormText color=\"muted\">\n            Upload an image\n          </FormText>\n        </FormGroup>\n        \n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\n/* Input.propTypes = {\n    children: PropTypes.node,\n    // type can be things like text, password, (typical input types) as well as select and textarea, providing children as you normally would to those.\n    type: PropTypes.string,\n    size: PropTypes.string,\n    bsSize: PropTypes.string,\n    state: deprecated(PropTypes.string, 'Please use the prop \"valid\"'),\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    // ref will only get you a reference to the Input component, use innerRef to get a reference to the DOM input (for things like focus management).\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    static: deprecated(PropTypes.bool, 'Please use the prop \"plaintext\"'),\n    plaintext: PropTypes.bool,\n    addon: PropTypes.bool,\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  CustomInput.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string.isRequired, // radio, checkbox, select, range, switch, file.\n    label: PropTypes.string, // used for checkbox and radios\n    inline: PropTypes.bool,\n    valid: PropTypes.bool, // applied the is-valid class when true, does nothing when false\n    invalid: PropTypes.bool, // applied the is-invalid class when true, does nothing when false\n    bsSize: PropTypes.string,\n    cssModule: PropTypes.object,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.array, PropTypes.func]), // for type=\"select\"\n    // innerRef would be referenced to select node or input DOM node, depends on type property\n    innerRef: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.func,\n    ])\n  };\n  \n  Form.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'form'\n    innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormFeedback.propTypes = {\n    children: PropTypes.node,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n    valid: PropTypes.bool, // default: undefined\n    tooltip: PropTypes.bool\n  };\n  \n  FormGroup.propTypes = {\n    children: PropTypes.node,\n    // Applied the row class when true, does nothing when false\n    row: PropTypes.bool,\n    // Applied the form-check class when true, form-group when false\n    check: PropTypes.bool,\n    inline: PropTypes.bool,\n    // Applied the disabled class when the check and disabled props are true, does nothing when false\n    disabled: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.string, // default: 'div'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  };\n  \n  FormText.propTypes = {\n    children: PropTypes.node,\n    inline: PropTypes.bool,\n    // Pass in a Component to override default element\n    tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]), // default: 'small'\n    color: PropTypes.string, // default: 'muted'\n    className: PropTypes.string,\n    cssModule: PropTypes.object,\n  }; */"]},"metadata":{},"sourceType":"module"}